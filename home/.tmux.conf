# .tmux.conf

set -g status-bg green
set -g status-fg brightwhite

set -g prefix C-a
set -g prefix2 C-a
unbind C-b

# send prefix. useful for nested sessions.
#bind-key ` send-prefix
bind-key a send-prefix

bind a select-pane -t :.+

unbind r
bind r source-file ~/.tmux.conf \;\
  display 'Reloaded ~/.tmux.conf'

# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
#set -g default-terminal "screen-256color"
set -g default-terminal "screen-256color-bce"

# Watch for activity in background windows
setw -g monitor-activity on

set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on

# Toggle mouse on with ^B m
bind m \
  set -g mode-mouse on \;\
  set -g mouse-resize-pane on \;\
  set -g mouse-select-pane on \;\
  set -g mouse-select-window on \;\
  display 'Mouse: ON'

# Toggle mouse off with ^B M
bind M \
  set -g mode-mouse off \;\
  set -g mouse-resize-pane off \;\
  set -g mouse-select-pane off \;\
  set -g mouse-select-window off \;\
  display 'Mouse: OFF'

# Make the active pane more visible
set -g pane-border-bg default
set -g pane-border-fg colour245
set -g pane-active-border-bg default
set -g pane-active-border-fg colour46

# Make the active window's name stand out
setw -g window-status-current-fg brightwhite
setw -g window-status-current-bg black

# Use color to indicate activity in a background window
# (Note this is inverted, fg means bg and vice versa.)
setw -g window-status-activity-fg white
setw -g window-status-activity-bg brightred

#unbind %
bind \ split-window -h -c '#{pane_current_path}'
bind | select-layout even-horizontal
bind - split-window -v -c '#{pane_current_path}'
bind _ select-layout even-vertical

#bind C-k run "tmux-zoom.sh"

# Keep your finger on ctrl, or don't
bind-key ^D detach-client
bind-key ^C new-window

# Create splits and vertical splits
bind-key v split-window -h -c '#{pane_current_path}'
bind-key ^V split-window -h -c '#{pane_current_path}'
bind-key s split-window -c '#{pane_current_path}'
bind-key ^S split-window -c '#{pane_current_path}'

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to Cmd-Opt-<h,j,k,l> in iTerm2.
# http://tangledhelix.com/blog/2012/04/28/iterm2-keymaps-for-tmux/
bind-key J resize-pane -D 2
bind-key K resize-pane -U 2
bind-key H resize-pane -L 2
bind-key L resize-pane -R 2

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
set -g base-index 1

# $Id: vim-keys.conf,v 1.2 2010-09-18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

## resize panes like vim
## feel free to change the "1" to however many lines you want to resize by, only
## one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
#bind - resize-pane -D 1
#bind + resize-pane -U 1

## bind : to command-prompt like vim
## this is the default in tmux already
#bind : command-prompt

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# vi-style controls for copy mode
setw -g mode-keys vi

# Vim-style copy/paste
#unbind [
#bind y copy-mode
#unbind p
#bind p paste-buffer
#bind -t vi-copy H start-of-line
#bind -t vi-copy L end-of-line
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
bind -t vi-copy Escape cancel
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# "zoom in" into a pane by making it its own window.
# http://tangledhelix.com/blog/2012/07/16/tmux-and-mouse-mode/
unbind +
bind + \
  new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
  swap-pane -s tmux-zoom.0 \;\
  select-window -t tmux-zoom

# "zoom out" by putting the window back into the pane where it was.
# http://tangledhelix.com/blog/2012/07/16/tmux-and-mouse-mode/
unbind -
bind - \
  last-window \;\
  swap-pane -s tmux-zoom.0 \;\
  kill-window -t tmux-zoom

set -g default-terminal "screen-256color"

set -g history-limit 40960

# toggle logging current pane to a log file
bind P pipe-pane -o "cat >>~/tmux.#W.log" \; display "Toggled logging to ~/tmux.#W.log"

# swap pane shortcuts (pc 2014-11-07)
#bind-key ^H swap-pane -L
#bind-key ^J swap-pane -D
#bind-key ^K swap-pane -U
#bind-key ^L swap-pane -R

bind-key ^R move-window -r

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

