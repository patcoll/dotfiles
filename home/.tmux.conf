# .tmux.conf

set -g status-bg colour112
set -g status-fg brightwhite

set -g prefix C-a
set -g prefix2 C-a
unbind C-b

# send prefix. useful for nested sessions.
bind-key a send-prefix

unbind r
bind r source-file ~/.tmux.conf \;\
  display 'Reloaded ~/.tmux.conf'

# No delay for escape key press
set -sg escape-time 10

# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal "screen-256color"

# Those who ignore history are doomed to repeat it.
set -g history-limit 40960

# Watch for activity in background windows.
setw -g monitor-activity on

# I always want mouse support.
set -g mouse on

# Make the active pane more visible
set -g pane-border-style bg=default,fg=colour245
set -g pane-active-border-style bg=default,fg=colour112

set -g window-style fg=colour251
set -g window-active-style fg=brightwhite

# Make the active window's name stand out
setw -g window-status-current-style bg=colour232,fg=colour112

# Use color to indicate activity in a background window
# (Note this is inverted, fg means bg and vice versa.)
setw -g window-status-activity-style bg=colour115,fg=colour245

# These don't work in `kitty`, so disabling them.
# unbind ^3
# bind C-3 run "~/bin/work 3"
# unbind ^4
# bind C-4 run "~/bin/work 4"

# Keep your finger on ctrl, or don't
bind-key ^D detach-client
bind-key ^C new-window

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to Cmd-Opt-<h,j,k,l> in iTerm2.
# http://tangledhelix.com/blog/2012/04/28/iterm2-keymaps-for-tmux/
bind-key J resize-pane -D 2
bind-key K resize-pane -U 2
bind-key H resize-pane -L 2
bind-key L resize-pane -R 2

# set first window to index 1 (not 0) to map more to the keyboard layout...
set -g base-index 1

# $Id: vim-keys.conf,v 1.2 2010-09-18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

## bind : to command-prompt like vim
## this is the default in tmux already
bind : command-prompt

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# vi-style controls for copy mode
setw -g mode-keys vi

# Vim-style copy
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'safe-reattach-to-user-namespace pbcopy'
bind -T copy-mode-vi Escape send-keys -X cancel
unbind -T copy-mode-vi 'Enter'
bind-key -T copy-mode-vi 'Enter' send-keys -X copy-pipe-and-cancel 'safe-reattach-to-user-namespace pbcopy'

# "zoom in" into a pane by making it its own window.
# http://tangledhelix.com/blog/2012/07/16/tmux-and-mouse-mode/
unbind +
bind + \
  new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
  swap-pane -s tmux-zoom.0 \;\
  select-window -t tmux-zoom

# "zoom out" by putting the window back into the pane where it was.
# http://tangledhelix.com/blog/2012/07/16/tmux-and-mouse-mode/
unbind -
bind - \
  last-window \;\
  swap-pane -s tmux-zoom.0 \;\
  kill-window -t tmux-zoom

# toggle logging current pane to a log file
bind P pipe-pane -o "cat >>~/tmux.#W.log" \; display "Toggled logging to ~/tmux.#W.log"

bind-key ^R move-window -r

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

